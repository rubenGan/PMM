
public class UsuariosProvider extends ContentProvider {
	//Definición del CONTENT_URI
	private static final String uri = "content://org.ejemplo.aguilar.EjemploContentProvider/usuarios";
	public static final Uri CONTENT_URI = Uri.parse(uri);
	
	//Clase interna para declarar las columnas
	public static final class Usuarios implements BaseColumns {
		private Usuarios() {}
		
	//Nombres de columnas
	public static final String COL_USUARIO = "usuario";
	public static final String COL_PASSWORD = "password";
	public static final String COL_EMAIL = "email";
	}
	
	//Base de datos
	private UsuariosSqliteHelper usudbh;
	private static final String BD_NOMBRE = "DBUsuarios";
	private static final int BD_VERSION = 1;
	private static final String TABLA_USUARIOS = "Usuarios";

	//UriMatcher
	private static final int USUARIOS = 1;
	private static final int USUARIOS_ID = 2;
	private static final UriMatcher uriMatcher;
	//Inicializamos UriMatcher con el formato de los dos tipos de acceso:genérico //a tabla o directo a un registro, 
	static {
		uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
		uriMatcher.addURI("org.ejemplo.aguilar.EjemploContentProvider", "usuarios", USUARIOS);
		uriMatcher.addURI("org.ejemplo.aguilar.EjemploContentProvider", "usuarios/#", USUARIOS_ID);
	}
	public boolean onCreate() {
	usudbh = new UsuariosSqliteHelper(getContext(), BD_NOMBRE, null, BD_VERSION);
		return true;
	}
	
	public Cursor query(Uri uri, String[] proyeccion, String seleccion,	String[] seleccionArgs, String ordenacion) {
//Si es una consulta a un ID concreto construimos el WHERE
String where = seleccion;
if (uriMatcher.match(uri) == USUARIOS_ID) {
	where = "_id=" + uri.getLastPathSegment();
}
		
SQLiteDatabase db = usudbh.getWritableDatabase();
		
Cursor c = db.query(TABLA_USUARIOS, proyeccion, where, seleccionArgs, null, null, ordenacion);
  return c;
}
public int update(Uri uri, ContentValues valores, String seleccion, String[] seleccionArgs) {
  int cont;
  //Si es una consulta a un ID concreto construimos el WHERE
  String where = seleccion;
  if (uriMatcher.match(uri) == USUARIOS_ID) {
	where = "_id" + uri.getLastPathSegment();
  }
SQLiteDatabase db = usudbh.getWritableDatabase();
cont = db.update(TABLA_USUARIOS, valores, where, seleccionArgs);
		
return cont;
}
	
public int delete(Uri uri, String seleccion, String[] seleccionArgs) {
  int cont;
  //Si es una consulta a un ID concreto construimos el WHERE
  String where = seleccion;
  if (uriMatcher.match(uri) == USUARIOS_ID) {
    where = "_id" + uri.getLastPathSegment();
  }
 SQLiteDatabase db = usudbh.getWritableDatabase();
cont = db.delete(TABLA_USUARIOS, where, seleccionArgs);
return cont;
}

public Uri insert(Uri uri, ContentValues valores) {
	long regId = 1;
		
	SQLiteDatabase db = usudbh.getWritableDatabase();
	regId = db.insert(TABLA_USUARIOS, null, valores);
	Uri nuevaUri = ContentUris.withAppendedId(CONTENT_URI, regId);
	return nuevaUri;
	}

	public String getType(Uri uri) {
	int match = uriMatcher.match(uri);
		
	switch(match) {
	case USUARIOS:
		return "vnd.android.cursor.dir/vnd.aguilar.usuario";
	case USUARIOS_ID:
		return "vnd.android.cursor.item/vnd.aguilar.usuario";
	default:
		return null;	
		}
	}
}

1.- Definir la estructura de almacenamiento
public class UsuariosSqliteHelper extends SQLiteOpenHelper{
//Sentencia SQL para crear la tabla de Usuarios
String sql = "CREATE TABLE Usuarios " +
 "(_id INTEGER PRIMARY KEY AUTOINCREMENT, " + "usuario TEXT, " +
				 "password TEXT, " + "email TEXT )";
	
public UsuariosSqliteHelper(Context contexto, String nombre, CursorFactory almacen, int version) {
	super(contexto, nombre, almacen, version);
}
	
public void onCreate(SQLiteDatabase db) {
  //Ejecutamos la sentencia para crear la tabla
  db.execSQL(sql);
//Introducimos 10 usuarios de ejemplo
 for (int i=1; i<=10; i++) {
	String usuario = "usuario" + i;
	String password = "passw" + i;
	String email = "email" + i + "@cefire.com";
	//Introducimos los datos en la tabla Usuarios
	db.execSQL
("INSERT INTO Usuarios (usuario, password, email) " +
" VALUES ('" + usuario + "', '" + password + "', '" + email + "')");
		}
	}
public void onUpgrade(SQLiteDatabase db, int versionAnterior, int versionNueva) {
	//Eliminamos la versión anterior de la tabla
	db.execSQL("DROP TABLE IF EXISTS Usuarios");
	//Creamos la nueva versión de la tabla
	db.execSQL(sql);
	}
}

2.-Clase de llamada pricipal
public class EjemploContentProvider extends Activity {
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
    }
}
